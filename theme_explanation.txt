/*
1 Compiled Interpreted tillarni o'rganamiz hamda ularning o'zaro solishtirma tahlili
2 Typescript nima va uning vujudga kelishi bizga qanday muammolarni hal qilib berdi 
3 Typescriptda dynamic typing va interfacekar tushunchasi 
4 Burak back end Loyihamizni Typescriptda quramiz 
5 Patternlarni o'rganamiz, Architecture and design patternlarga to'xtalamiz


//Compiled tillar Java, Golang, C, C++, C# Rust => Compiling yani to'liq mashina qiliga o'giradi & Running
//Bu tillarda esa aynan qayerda xato boriligi ko;riladi va error qaytarib turadi yani run bo'lmaydi. biz uni xatoligini bilish uchun run qilishimiz shart emas yani u xato bolsa project run bolmaydi


//Interpreted tillar: NOdejs, Python, PHP, Ruby => Running yani bu tillar to'g'ridan to'g'ri satrma satr run qiladi yani bularda Compiling yo'q
//Compile qilinmasdan Run bolishi bu bizga jarayon tezlashtirgani foyda bersada 
//Compile qilinmagani uchun ham errorlarni bu bizga qachonki unga yuz kelib run qilsa qaytaradi 



Error Asosan type errorlar haqida gap ketyapti yani typega bog'liq errorlar haqida gapiryapmiz 
Mana shu ozi asosan Node.js ni eng og'riqli nuqtalaridan edi yani bunda Type integration mavjud emas edi desak ham boladi 

Typescript compiled languagelarga o'xshash static typelarni yani dynamic typelarni nodejs ga olib kirdi va bu bizga katta projectlarda qo'l keladi 
Typescriot bu nima ?
Typescript bu Nodejsga type tushunchasini olib kirgan yani dynamic type integrationni hosil qilgan instrument hisoblanar ekan 
Typescript = Typecriptga tegishli elementlar  + javascript 
Sourcimizni biz Typescriptga yozamiz va bizning tapescript bniz yozgan typescript kodni js ga to'liq o'tkazar ekan yani Compile qiladi Javascriptga 

Dynamic Interface tushunchasi 

Primitive types refference ga ega bolmagan varibllar
string 
number 
symbol 
boolean
null
undefined
symbol

Object types
array
map


*/


TYPESCRIPT PLAYGROUND 



/*
let box: string;
box = "hello";
box = 100;
yani bu yerda run bolmasdan turib compile error beryapti yani siz stringni numberga tenglolmaysiz deb 

*/

/*
const counter: number = "hi";
Bu yerda number deb turib string beropmiz

let stage:number | string = "hello";
stage = 100;
tepadagini ham string qilopmiz ham number qilyapmiz xatoliksiz ishlayapti


  //objectlarda koramiz

//interface
//biz bu yerda interface yordamida ozimini objectimizni propertylarini typini define qilyapmiz

interface Person {
    name:string,
    age:number,
    nation:string,
}
//interface orqali hosil qilgan typimizni berypamiz
const person: Person= {
    name: 'Adam',
    age: 30,
    nation: 'Uzbek'
}

//Arraylar
let skills: string[];
skills = ['problemsolving', 'adambek', 'go home', 100];

let smth: (string | number) [];
smth = ['problemsolving', 'adambek', 'go home', 100];



class Person {
    age: number;
    firstName: string;
    lastName: string;

    constructor(age: number, firstName: string, lastName: string) {
        this.age = age;
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

const person1 = new Person (true, 'Martin', 'Robertson'); 
// mana bu yerda compile error beryapti yani bu aytmoqchiki siz deyapti number orniga boolean qiymat beryapsiz deyapti.

*/

Har qanday front yoki back end patternlar yordamida quriladi  

Architectural patternlar 
MVC = 
model view controller, 
MVP = model view presenter

backendning suyagi 
malumotlar oqimini tartibga soladigan vosita yani arxitetktura 
odamning ozi yani arxitekturasi vazifasini bajaradi
DI = dependency injection modullar ishlatish tizimida ishlatilinadi yani nestjsda 

Design patternlar MIddlerware, Decorator , MVVC
butun bir back edn tizimini emas malum strukturani bo'laklarini tuzishga kerak boladi 
insonning barmo'gi suyagi vazifasini bajaradi
DI = dependency injection,


Design patternlar Creational | Structural | Behavioral turlariga bo'linadi 

bu langugagelar aro o'xshash tushunchalar

pattern manosi naqsh degani lkn bizn buni suyak deb atasak boladi 


// ARCHITECTURE PATTERNS:
//   ◦ MVC => Burak(backend) + Nestar(backend)  = Model View Controller => Controller > Model > Controller
//   ◦ DI (Dependancy Injection) => Nestar
//   ◦ REDUX => Burak-Front (REACT)
//   ◦ MVP => Model View Presentor


//   DESIGN PATTERNS:
//   ◦ Decorators pattern => Nestar
//   ◦ MiddleWare pattern => Burak + Nestar
//   ◦ MVVM









//CLUSTER => DATABASE => COLLECTION => DOCUMENT :Table =>  Dataset

//MONGODB noSQL DOCUMENT BASED database


MongoDB is a NoSQL database 
xususiyatlari :

Schema yani: 
oldindan tashkillashtirilgan sxemasi bo'lmaydi yani fayllaring bu tartibda bo'ladi
yoki bu shaklda bo'ladi degan xuddi SQLga oxshab table holatda boladi degan structurasi bolmaydi 

Data Formats yani: 
Turli xil malumot turlarini o'z ichiga olib biladi {dokument, graph, ustun, key-value, }
Masalan 

Real-Life Example: E-commerce Website
miso uchun Amazonga o'xshagn online magazin. 
har bir mahsulotni turli xil xususiyatlari boladi , 
misol uchun razmer, rang, narx, and sotuvda mavjudligi .  
SQLda Bularni barchasi bitta document sifatida turadi json farmatda.

{
  "product_id": "123",
  "nomi": "T-shirt",
  "razmer": ["S", "M", "L"],
  "rang": "Blue",
  "narx": 19.99,
  "sotuvda_mavjudligi": true
}

SQL databselarda bu narsa alohida table talab qiladi yani oldindan siz qatiy bir nechta jadvallariz bolishi kerak 
misol uchun mahsulotlar uchun alohida jadval, mahsulot attributlari uchun alohida jadval qilish talab qiladi 
bu uje noqulaylik bildiardi. yana ustiga agar biz yangi attribut qoshishimiz kerak bolsa yani qoshimcha column 
jadvalga databasaga borib ozgartirish kiritish kabi kop ish oladi.

             ***Product Table***
| ProductID | Nomi       | Narxi  | sotuvda_mavjudligi | location |
|-----------|------------|--------|--------------------|          |
| 123       | T-shirt    | 19.99  | true               |           
| 124       | Laptop     | 999.99 | false              |
             ***Attribute Table***

| AttributeID | ProductID | AttributeNomi | AttributeQiymati |
|-------------|-----------|---------------|------------------|
| 1           | 123       | Size          | S                |
| 2           | 123       | Size          | M                |
| 3           | 123       | Color         | Blue             |
| 4           | 124       | Processor     | i5               |
| 5           | 124       | RAM           | 16GB             |


nimaga asosan ishlatilinadi ?
handling large-scale data. katta maydon qancha ishlatsangi bemalol 
unstructured data. aniq struktura bolmaydi 




Mongoose is Sqllashtirilgan database 
Schema bu Mongooseda bu shunaqangi bir struktura unda biz ozimizni documentimizni shaklini tasniflaymiz collectionni ichida. 
Consistency aniqlik boladi 


Mongoose bu mongodb bilan ishlash uchun hosil qilingan package hisoblanadi

REJA loyihada mongodbni to'g'ridan to'g'ri ishlatilindi
BURAK loyihasida biz mongodbni mongoose package bilan ishlaymiz SQL singari tablega oxshagan datalarni schema orqali hosil qilamiz 
mongoosejs.com 

mongoose bizga suniy tablelarni yaratib beradi va schema validation xatoligini beradi 

no sql ni - tomoni qolipsiz plansiz yani luboy narsani yozib ketadi 


Router va controllerlar 
1 Routerlarni o'rganamiz 
//router instansidan foydalanib biz get post methodlarini amalga oshirishimiz mumkin 
app.use('/', router); / slashdan kelayotgan zaproslarni router.ts faylga yuborishini sorayapmiz
app.use('/', router); nimaga bu use() Middleware design patternligini sababi 
                       mana shu / dan kelayotgan malumotlarni bizni router.ts faylimizga yo'naltiryapti 
                       va buning vazifai faqat shu yerga amalga oshadi 

2 MVC architecture patterni o'rganamiz 
    Design patternlar butun bir tizmini suyagini qura olmaydi 
    lekin architecture patternlar butun bir tizimni suyagini qura beradi

    Model View Controller => Controller > Model > Controller
    bir nech cloudlar yani browserlar request yuboradi va birinchi navbatda bu router turadi va routerdan keyn MVC turadi 
    Controllerlar markaziy rolni bajaradi. Routerimiz turli xil requestlarni qabul qiladi va controllerga yuboradi. 
    controller esa boshqaruvchi yani bizga kelgan requestni taqdiri bilan shug'ullanadi control qilib turadi
     shuning uchun ham unga juda katta manqtiq yozilmaydi chunki asosiy vazifasi boshqaruv. 
     controllerlar modellarga rquest yubroadi yani mana buni qil deb buyuradi va 
     modellar esa o'z navbatida business logic ham deyiladi yani asosiy mantiqimiz  modellarda yoziladi.

     MODEL ozi 2 ga bo'linadi  

     Servis model => tog'ridan to'g;ri controllerlar bilan ishlaydi yani controller uchun xizmat qiladi.
     Schema model => database bilan birgalikda ishlash uchun yordamga keladigan modellar hisoblanadi. 
     Schema orqali databasedan malumot CRUD qilamiz va uning natijasini esa Servis ga beramiz 
     va u Controllerga yuboradi. Servis modeldan olgan datani controllerimiz viewga malumotni beradi 
     View esa bizning HTMl ni backenda qurib oladi. va view bizga tayyor HTML falyni bizning contorllerga qaytarib beradi 
     Controller esa bu olgan faylni routerlar orqali bizning browserga yuboradi.

3 Member controllerlarini xosil qilamiz
export default ishlatsangiz o'sha faylni umumiy qaytarayotgan qiymatini olishingiz mumkin boladi 
agar default qilmasangiz u yerdan yana boshqa qiymatlarni qaytarishingiz mumkin
yani faykdan birgina qiyamtni yaxlit qaytrish uchun dfault ishltilinadi 

4 Restaurant Controllerni xosil qilamiz 


/*** 4- ROUTERS ***/
app.use('/', router); 
Burak back end loyihani ikki maqsadda ishlatyapmiz
1- SPA: REACT uchun restapi server sifatida ishlatamiz 
2- BSSR: EJS, Burak adminkasini qurish uchun.

Member Schema Modellar 
1 Member Service Model xaqida gaplashamiz

2 Mongoose documentationga borib unda 
  Schema Model va Quary tushunchalarini o'rganamiz
      schema model
  Mongooseda markaziy tushuncha bu Schemadir
  Biz hosil qilgan schema orqali modelni quramiz shunign uchun ham member schema model
  Databse bilan bog'liq har qanday ishlarni schema model orqali bajaramiz.
    
       Query
   Schema modellar orqali choqiriladigan komndalar query deyiladi. 
   Query ni qayta qayta chain holatda ishlatib ketishimiz mumkin.
   masalan nimadir method nuqta qoyib yana shart qoyish mumkin


3 Member Schema Modelni birgalikda hosil qilamiz
  enum qiymatlar aniq belgilangan qiymatlarnigina 
  qabul qilish maqsadida ishlatilnadigan type hisoblanadi


  Loyiha standartlarini joriy qilamiz

  Bizda Login qilish mexanizmi
  Error handle qilish mexanizmi misol uchun Restaurantcontrollerda har birida console.log(gohome..) qilindi
  o'zimiz hosil qilgan errorlarni handleqilish mexanizmlar to'plami try/catch usage
  serverga kelayotgan turli xil requestlarni tarkibini serverga chiqarish tushuniladi
  Morgan Loyihamizga bo'layotgan requestlarni turlarini ko'rish uchun kerak

  Project Standards
  - Logging Standards
  - Naming Standards
     function, method, varible => Camel Case 
     class => PASCAL
     folder, file => Kebab-Case
     CSS => Snake_Case
  - Error handling    
  
  Nimga Asynchronous try catch ishlatyapmiz ?

  try maydonida biz ozimizni logikamizni yozamiz va uni ichida error chiqsa uni catch tutib olib chiqaradi consolega
  
  Browser faqat Get bilan ishlay oladi 
  Postni biz browserdan olomaganimiz uchun postmanga murojaat qildik 
  Post methodni qanday serverga 
  Get qandaydir malumotlarni render qilib qandaydir malumotni olish uchun ishlatilinsa
  Post mehodi asosan harakatlarni amalga oshirish vaqtida. o'zgatirish uchun mutation uchun 
  get  postda ishlash bu minimalistik podxod
  postman tool orqali browserdan ololmagan har qanday turdagi methodlarimizni olishimiz mumkin
  Response berilmasa: controllerimizni methodidan response ololmasa API qotib qoladi  
  response turlari :
       send malum bir malumotni yuborish uchun <p>hello</p>
       | json | redirect | end | render malum bir fileni yuborishga yani tayyor fayl bor shuni yuboramiz
  
  postni browserdan olomaganimiz uchun postmanga murojaat qildik. 
  app.js dagi admindan otadi routeradminga boradi post methodini izlaydi chunki biz post requestini 
  yuboryapmiz URL ni solishtiradi hammasi maqul bolsa process loginni yuboradi hamda process loginda 
  javob kelishi kerak javobni esa response send bilan yuboramiz
  biz loyihada minimalistik padxoddan foydalanyapmiz query hamda mutation holatiga moslashtiramiz 
  Get Methodi agar qandaydir datalarni back enddan olayotgan bolsak biz getni ishlatamiz 
  qolgan barcha holatlarda post ishlatamiz put patch delete ni orniga

  bizda bitta Urlimiz ham get hamda post vazifasini bajarishi mumkin 

  API request methodlari haqida gaplashamiz hamda postmanni quramiz

  -Adminka signup jarayonini amalga oshiramiz 





Application Proggraming Interface 

1
Traditional API
Rest API
GraphQL API

2
Header/ Body

3
Get / Post


REQUESTNi 

body hamda Header qismi bor 
body qismi faqat post methodlarda bor 

Http bir marta request 
Ctp doimiy bog'lanish


// Promise<void>promise orqali bu methodimiz hech nimani qaytarmasligini yozyapmiz  
//qachonki bizning methodimiz asynchronous method bolmasa promise ishlatmaysiz promise faqat async methodda ishlatilinadi 
// asynchoronous methodlar bilan ishlaymiz chunki biz doim databse bilan ishlaymiz yani databasedan malumot olamiz 



Json format data bilan objectni farqi qo'shtirnoqlarda
Objectlarni key qismini string qilsak Json format boladi. 


Authentication -
Authoriation - 
                                  Web server va undagi Authentication jarayoni


   1 VPS va VPC o'zi nima  ?

Virtual private server  
Digital ocean 
Hostinger
ozimizni displayi yo'q computerimizga o'xshaydi 
bitta yacheyjani tanlagandan keyn sacling qilolmaysiz yani kattaroq project uchun boshqa server tanlashizga togri keladi 


Virtual private cloud
bir nechta machinelarni ustida qurilgan environment hisoblanadi 
bu esa fizichiskiy chegaralanmagan xohalgancha kengaytirib borasz

   2 Serverlarning o'zaro bog'lanish bo'yicha turlari 

Nodejs ni o'ziga xos xususiyati shundaki uni togridan togri web server korinishida 
run qilish imkoniyatini beradi qaysiki phpda qilib bo'lmaydi. yani o'zini mustaqil web server sifatida run bo'la olmaydi.
va bularga Apachi hamda Nginx yordamga keladi. 

Client server
Markaziy server tushunchasi mavjud boladi  yani express orqali qurgan web serverimiz markazda joylashadi. 
Web serverlarimiz nodejs da yozilgan serverdan tashqari client server ham hisoblanadi. 

Peer to Peer
Blokchain texnalogiyasiga xos hisoblanadi, bu yerda har bir mashina bir node hisoblandai
va bir biriga uzviy bog'langan hisoblanadi yani bir joyda saqlanmaydi ular zanjir ravishda 
bog'langan boladi. Malumotlar bazasi bir joyda bo'lmaydi yani markaziy server tushunchasi mavjud emas

Hackerlar hacking qilsa node dagi malumotni o'zgartirsa qolgan nodelarimiz uni ozi holiga qaytarib qo'yadi
bizning serverlarimizni shakli client server yani web server hisoblanadi.
   3 Authentication nima va uni tashkillashtirish usullari 

Authentication bu nima ?
aynan web serverga kim murojaat qilayotganini server aniqlash jarayoni Authentication deyiladi
Authentication processini usullari
1.Sessions (Cookies) methodimizni ozi sessionlar orqali ishlatilinish mexanizmi cookielarni ichida
2.Tokens (Cookies) Tokenslarni cookielarni ichida saqlash orqali Authenticationni amlag oshiramiz 
JWT json web token orqali token hosilm qilishda yordamga keladi 
3.Tokens (Headers) Tokenlarni cookielarda saqlamay har bitta kelajakdagi requestlarni Headerlar orqali yuborishni strategiya qilgan uslubimiz hisoblanadi.

   4 Session Authentication qanday ishlashini nazariy tahlil qilamiz  
shunday membernick va memberpasswordga ega bolgan user topilsa databsedan aytaylik
john degan user mavjud ekan mana shu bosqichda maxsus packagelar orqali 
hosil bo'lgan userimizni malumotlariga session ID ni biriktiramiz va bu session ID 
avtomatik ravishda bizning browserimizga borib bizning browserimizni cookie qismida save boladi buni biz 
maxsus packagelar orqali va ozimini mantiqlarimiz orqali amalga oshiramiz yani manashu login bolgan user uchun maxsus 
session id biriktiriladi va bu session id borib browserimizni cookie qismiga joylashib oladi. 
aynan mana shu jarayondan keyn bizni browserimizida cookiemizni xotirasida aynan login bolgan userni session 
idsi hosil boladi va bu bizning Authentication processimizni poydevori hisoblanadi
yani bizning browserdan navbatdagi qilinayotgan requestlar ichida cookie ham joylashib oladi 
cookieni shunday tabiati bor  u borib har qanday requestga  ozini boglab qoyadi yani request bilan 
har bitta request bilan birga yetib keladi va bizning serverimiz aynan mana shu cookieni ichidagi session idni 
oqib session id ga tegishli bolgan demak malumotni bizga taqdim etadi va bining serverga kim murojaat qilayotganligini 
aniq bilib oladi.

nega cookielarni ishlatishimizni asosiy sababi cookielarni kuchli himoyaga ega ekanligidadir, 

   5 browserlarning xotiralarini o'rganamiz                              

   browserni 3 xil xotirasi bor 

   local storage 
   session storage
   cookie storage 

Browserni storageini application bolimidan tekshirishimiz mumkin 
cookielar maxsus himoya vositasidan tashqari cookielar requestga joylashib olish xususiyatiga ega 
choqirilgan va choqirilmagan joyga ham boradigan bir surbet texnalogiya sifatida qarash mumkin 
communikatsiya qilish xususiyatiga ham ega yani malum vaqtni korsatamiz ozini ozi yo'q qilib yuboradi va
bizga foydali muhitni yaratib beradi.    


                              EJS adminka quramiz 
BSSR ni qurayotganda biz render methodidan faol foydalanamiz yani responsening render methodi mavjud 

Rasmlarni o'zini serverlarda saqlaymiz
Serverda saqlangan rasmimizning linkini databasega joylaymiz

project run boganda  mongodb automatik ozini ichiga har bitta collectionni yaratib oladi ysni bu AutoMigration deyiladi yani buni schemadan kelib chiqib qiladi  



                                  Jquery
Jquery bu javascriptimizni web loyihamizda osonlikcha mantiqlarni yozishimiz 
mumkin yani vanila js da 4-5 satrlik matnlarni 1nechta satrlarda yozish imkoni bo'ladi 



